local UILibrary = {}

-- Default colors and settings
UILibrary.Settings = {
    BackgroundColor = Color3.fromRGB(30, 30, 30),
    TitleBarColor = Color3.fromRGB(20, 20, 20),
    TextColor = Color3.fromRGB(255, 255, 255),
    ButtonColor = Color3.fromRGB(40, 40, 40),
    ButtonTextColor = Color3.fromRGB(255, 255, 255),
    TextBoxColor = Color3.fromRGB(40, 40, 40),
    OnColor = Color3.fromRGB(0, 255, 0),
    OffColor = Color3.fromRGB(255, 0, 0),
    ScrollBarColor = Color3.fromRGB(80, 80, 80),
    ScrollBarThumbColor = Color3.fromRGB(120, 120, 120),
    ElementHeight = 30,
    Padding = 5
}

-- Helper function to create instances
local function CreateInstance(className, props)
    local instance = Instance.new(className)
    for prop, value in pairs(props) do
        instance[prop] = value
    end
    return instance
end

-- Create a new UI window
function UILibrary:CreateWindow(title, size, position)
    local window = {Elements = {}, Visible = true}
    
    -- Create the main UI container
    window.ScreenGui = CreateInstance("ScreenGui", {
        Name = "UILibrary_"..tostring(math.random(1, 10000)),
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = game:GetService("CoreGui")
    })
    
    -- Main frame
    window.MainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        Size = size or UDim2.new(0, 200, 0, 250),
        Position = position or UDim2.new(0.5, -100, 0.5, -125),
        BackgroundColor3 = self.Settings.BackgroundColor,
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        ClipsDescendants = true,
        Parent = window.ScreenGui
    })
    
    -- Title bar
    window.TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 25),
        BackgroundColor3 = self.Settings.TitleBarColor,
        BorderSizePixel = 0,
        Parent = window.MainFrame
    })
    
    -- Title text
    window.TitleText = CreateInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        BackgroundTransparency = 1,
        Text = title or "UI Library",
        TextColor3 = self.Settings.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = window.TitleBar
    })
    
    -- Minimize button
    window.MinimizeButton = CreateInstance("TextButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 25, 0, 25),
        Position = UDim2.new(1, -25, 0, 0),
        BackgroundColor3 = self.Settings.TitleBarColor,
        BorderSizePixel = 0,
        Text = "_",
        TextColor3 = self.Settings.TextColor,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        Parent = window.TitleBar
    })
    
    -- Scrolling frame
    window.ScrollingFrame = CreateInstance("ScrollingFrame", {
        Name = "ScrollingFrame",
        Size = UDim2.new(1, -10, 1, -30),
        Position = UDim2.new(0, 5, 0, 30),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = self.Settings.ScrollBarColor,
        VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        Parent = window.MainFrame
    })
    
    -- UI list layout for scrolling frame
    CreateInstance("UIListLayout", {
        Padding = UDim.new(0, self.Settings.Padding),
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = window.ScrollingFrame
    })
    
    -- Minimized state
    window.Minimized = false
    window.OriginalSize = window.MainFrame.Size
    
    -- Toggle minimize function
    function window:ToggleMinimize()
        self.Minimized = not self.Minimized
        self.MainFrame.Size = self.Minimized and UDim2.new(0, 200, 0, 25) or self.OriginalSize
        self.MinimizeButton.Text = self.Minimized and "+" or "_"
        self.Visible = not self.Minimized
    end
    
    -- Destroy function
    function window:Destroy()
        self.ScreenGui:Destroy()
    end
    
    -- Connect minimize button
    window.MinimizeButton.MouseButton1Click:Connect(function()
        window:ToggleMinimize()
    end)
    
    -- Mobile touch support
    local UserInputService = game:GetService("UserInputService")
    if UserInputService.TouchEnabled then
        local dragStartPos, frameStartPos
        
        window.TitleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                dragStartPos = input.Position
                frameStartPos = window.MainFrame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragStartPos = nil
                    end
                end)
            end
        end)
        
        window.TitleBar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch and dragStartPos then
                local delta = input.Position - dragStartPos
                window.MainFrame.Position = UDim2.new(
                    frameStartPos.X.Scale, 
                    frameStartPos.X.Offset + delta.X,
                    frameStartPos.Y.Scale,
                    frameStartPos.Y.Offset + delta.Y
                )
            end
        end)
    end
    
    return window
end

-- Add a toggle button to the window
function UILibrary:AddToggle(window, text, defaultValue, callback)
    local toggle = {Value = defaultValue or false}
    
    toggle.Button = CreateInstance("TextButton", {
        Name = "ToggleButton_"..text,
        Size = UDim2.new(0.9, 0, 0, self.Settings.ElementHeight),
        LayoutOrder = #window.Elements + 1,
        BackgroundColor3 = self.Settings.ButtonColor,
        BorderSizePixel = 0,
        Text = text..": "..(toggle.Value and "ON" or "OFF"),
        TextColor3 = toggle.Value and self.Settings.OnColor or self.Settings.OffColor,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        Parent = window.ScrollingFrame
    })
    
    function toggle:SetValue(value)
        if self.Value ~= value then
            self.Value = value
            self.Button.Text = text..": "..(value and "ON" or "OFF")
            self.Button.TextColor3 = value and self.Settings.OnColor or self.Settings.OffColor
            if callback then callback(value) end
        end
    end
    
    toggle.Button.MouseButton1Click:Connect(function()
        toggle:SetValue(not toggle.Value)
    end)
    
    table.insert(window.Elements, toggle)
    return toggle
end

-- Add a button to the window
function UILibrary:AddButton(window, text, callback)
    local button = {}
    
    button.Button = CreateInstance("TextButton", {
        Name = "Button_"..text,
        Size = UDim2.new(0.9, 0, 0, self.Settings.ElementHeight),
        LayoutOrder = #window.Elements + 1,
        BackgroundColor3 = self.Settings.ButtonColor,
        BorderSizePixel = 0,
        Text = text,
        TextColor3 = self.Settings.ButtonTextColor,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        Parent = window.ScrollingFrame
    })
    
    button.Button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
    
    table.insert(window.Elements, button)
    return button
end

-- Add a textbox to the window
function UILibrary:AddTextbox(window, text, defaultValue, callback)
    local textbox = {Value = defaultValue or ""}
    
    textbox.Frame = CreateInstance("Frame", {
        Name = "TextboxContainer_"..text,
        Size = UDim2.new(0.9, 0, 0, self.Settings.ElementHeight + 20),
        LayoutOrder = #window.Elements + 1,
        BackgroundTransparency = 1,
        Parent = window.ScrollingFrame
    })
    
    textbox.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 15),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = self.Settings.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = textbox.Frame
    })
    
    textbox.Box = CreateInstance("TextBox", {
        Name = "Textbox",
        Size = UDim2.new(1, 0, 0, self.Settings.ElementHeight),
        Position = UDim2.new(0, 0, 0, 20),
        BackgroundColor3 = self.Settings.TextBoxColor,
        BorderSizePixel = 0,
        Text = tostring(textbox.Value),
        TextColor3 = self.Settings.TextColor,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = textbox.Frame
    })
    
    function textbox:SetValue(value)
        self.Value = value
        self.Box.Text = tostring(value)
    end
    
    if callback then
        textbox.Box.FocusLost:Connect(function(enterPressed)
            if enterPressed or not textbox.Box:IsFocused() then
                textbox.Value = textbox.Box.Text
                callback(textbox.Value)
            end
        end)
    end
    
    table.insert(window.Elements, textbox)
    return textbox
end

-- Add a label to the window
function UILibrary:AddLabel(window, text)
    local label = {}
    
    label.Label = CreateInstance("TextLabel", {
        Name = "Label_"..text,
        Size = UDim2.new(0.9, 0, 0, self.Settings.ElementHeight),
        LayoutOrder = #window.Elements + 1,
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = self.Settings.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = window.ScrollingFrame
    })
    
    table.insert(window.Elements, label)
    return label
end

-- Add a separator to the window
function UILibrary:AddSeparator(window)
    local separator = {}
    
    separator.Frame = CreateInstance("Frame", {
        Name = "Separator",
        Size = UDim2.new(0.9, 0, 0, 1),
        LayoutOrder = #window.Elements + 1,
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        BorderSizePixel = 0,
        Parent = window.ScrollingFrame
    })
    
    table.insert(window.Elements, separator)
    return separator
end

return UILibrary
