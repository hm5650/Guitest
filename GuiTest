local UILibrary = {}

-- cool colors
UILibrary.DefaultColors = {
    TitleColor = Color3.fromRGB(255, 255, 255),
    CollapseBtnColor = Color3.fromRGB(25, 25, 25),
    ButtonColor = Color3.fromRGB(45, 45, 45),
    ButtonHoverColor = Color3.fromRGB(60, 60, 60),
    ToggleColor = Color3.fromRGB(45, 45, 45),
    ToggleColorOFF = Color3.fromRGB(200, 60, 60),
    ToggleColorON = Color3.fromRGB(60, 200, 60),
    MainFrameColor = Color3.fromRGB(35, 35, 35),
    SeparatorColor = Color3.fromRGB(70, 70, 70),
    TextBoxColor = Color3.fromRGB(45, 45, 45),
    AccentColor = Color3.fromRGB(0, 120, 215),
    SectionColor = Color3.fromRGB(90, 90, 90),
    LabelColor = Color3.fromRGB(200, 200, 200),
    SliderColor = Color3.fromRGB(70, 70, 70),
    SliderHandleColor = Color3.fromRGB(100, 100, 100),
    UIStrokeColor = Color3.fromRGB(60, 60, 60),
    TabColor = Color3.fromRGB(45, 45, 45),
    TabHoverColor = Color3.fromRGB(60, 60, 60),
    TabActiveColor = Color3.fromRGB(70, 70, 70)
}

-- Config stuff
UILibrary.DefaultConfig = {
    Title = "UI Library",
    TitleText = "UI Library",
    Size = UDim2.new(0, 250, 0, 350),
    Position = UDim2.new(0.5, -125, 0.5, -175),
    TitleHeight = 30,
    CornerRadius = 6,
    ElementPadding = 6,
    Font = Enum.Font.GothamSemibold,
    TextSize = 12,
    SectionHeight = 20,
    UIStrokeThickness = 1,
    UIStrokeEnabled = true,
    TabWidth = 40, -- Width of the tab selector area
    TabPadding = 5 -- Padding between tabs
}

function UILibrary.new(config)
    local self = setmetatable({}, { __index = UILibrary })
    
    self.Config = {}
    for k, v in pairs(UILibrary.DefaultConfig) do
        self.Config[k] = config[k] or v
    end
    
    self.Colors = {}
    for colorName, defaultColor in pairs(UILibrary.DefaultColors) do
        self.Colors[colorName] = config[colorName] or defaultColor
    end
    
    self.Elements = {}
    self.Visible = true
    self.Minimized = false
    self.Tabs = {}
    self.CurrentTab = nil
    
    self:CreateUI()
    
    return self
end

function UILibrary:CreateUI()
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "UILibrary"
    self.ScreenGui.Parent = game:GetService("CoreGui")
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = UDim2.new(self.Config.Size.X.Scale, self.Config.Size.X.Offset + self.Config.TabWidth, self.Config.Size.Y.Scale, self.Config.Size.Y.Offset)
    self.MainFrame.Position = self.Config.Position
    self.MainFrame.BackgroundColor3 = self.Colors.MainFrameColor
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Active = true
    self.MainFrame.Draggable = true
    self.MainFrame.ClipsDescendants = true
    self.MainFrame.Parent = self.ScreenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, self.Config.CornerRadius)
    corner.Parent = self.MainFrame
    
    -- Add UI Stroke to main frame
    if self.Config.UIStrokeEnabled then
        local uiStroke = Instance.new("UIStroke")
        uiStroke.Thickness = self.Config.UIStrokeThickness
        uiStroke.Color = self.Colors.UIStrokeColor
        uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        uiStroke.Parent = self.MainFrame
    end
    
    self.TitleBar = Instance.new("Frame")
    self.TitleBar.Name = "TitleBar"
    self.TitleBar.Size = UDim2.new(1, -self.Config.TabWidth, 0, self.Config.TitleHeight)
    self.TitleBar.Position = UDim2.new(0, 0, 0, 0)
    self.TitleBar.BackgroundColor3 = self.Colors.CollapseBtnColor
    self.TitleBar.BorderSizePixel = 0
    self.TitleBar.ZIndex = 2
    self.TitleBar.Parent = self.MainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, self.Config.CornerRadius)
    titleCorner.Parent = self.TitleBar
    
    self.TitleText = Instance.new("TextLabel")
    self.TitleText.Name = "TitleText"
    self.TitleText.Size = UDim2.new(0.7, 0, 1, 0)
    self.TitleText.Position = UDim2.new(0, 12, 0, 0)
    self.TitleText.BackgroundTransparency = 1
    self.TitleText.Text = self.Config.TitleText
    self.TitleText.TextColor3 = self.Colors.TitleColor
    self.TitleText.TextXAlignment = Enum.TextXAlignment.Left
    self.TitleText.Font = Enum.Font.GothamBold
    self.TitleText.TextSize = 14
    self.TitleText.ZIndex = 3
    self.TitleText.Parent = self.TitleBar
    
    self.MinimizeButton = Instance.new("TextButton")
    self.MinimizeButton.Name = "MinimizeButton"
    self.MinimizeButton.Size = UDim2.new(0, self.Config.TitleHeight, 0, self.Config.TitleHeight)
    self.MinimizeButton.Position = UDim2.new(1, -self.Config.TitleHeight, 0, 0)
    self.MinimizeButton.BackgroundColor3 = self.Colors.CollapseBtnColor
    self.MinimizeButton.BorderSizePixel = 0
    self.MinimizeButton.Text = "-"
    self.MinimizeButton.TextColor3 = self.Colors.TitleColor
    self.MinimizeButton.Font = Enum.Font.GothamBold
    self.MinimizeButton.TextSize = 18
    self.MinimizeButton.ZIndex = 3
    self.MinimizeButton.Parent = self.TitleBar
    
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0, self.Config.CornerRadius)
    minCorner.Parent = self.MinimizeButton
    
    -- Create tab selector area
    self.TabSelector = Instance.new("Frame")
    self.TabSelector.Name = "TabSelector"
    self.TabSelector.Size = UDim2.new(0, self.Config.TabWidth, 1, -self.Config.TitleHeight)
    self.TabSelector.Position = UDim2.new(1, -self.Config.TabWidth, 0, self.Config.TitleHeight)
    self.TabSelector.BackgroundColor3 = self.Colors.MainFrameColor
    self.TabSelector.BorderSizePixel = 0
    self.TabSelector.Parent = self.MainFrame
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, self.Config.CornerRadius)
    tabCorner.Parent = self.TabSelector
    
    self.TabListLayout = Instance.new("UIListLayout")
    self.TabListLayout.Padding = UDim.new(0, self.Config.TabPadding)
    self.TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    self.TabListLayout.Parent = self.TabSelector
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingTop = UDim.new(0, self.Config.TabPadding)
    tabPadding.PaddingBottom = UDim.new(0, self.Config.TabPadding)
    tabPadding.Parent = self.TabSelector
    
    -- Create content area
    self.ContentArea = Instance.new("Frame")
    self.ContentArea.Name = "ContentArea"
    self.ContentArea.Size = UDim2.new(1, -self.Config.TabWidth, 1, -self.Config.TitleHeight)
    self.ContentArea.Position = UDim2.new(0, 0, 0, self.Config.TitleHeight)
    self.ContentArea.BackgroundTransparency = 1
    self.ContentArea.Parent = self.MainFrame
    
    self.ScrollingFrame = Instance.new("ScrollingFrame")
    self.ScrollingFrame.Name = "ContentFrame"
    self.ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    self.ScrollingFrame.Position = UDim2.new(0, 0, 0, 0)
    self.ScrollingFrame.BackgroundTransparency = 1
    self.ScrollingFrame.BorderSizePixel = 0
    self.ScrollingFrame.ScrollBarThickness = 4
    self.ScrollingFrame.ScrollBarImageColor3 = self.Colors.AccentColor
    self.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    self.ScrollingFrame.Parent = self.ContentArea
    
    self.UIListLayout = Instance.new("UIListLayout")
    self.UIListLayout.Padding = UDim.new(0, self.Config.ElementPadding)
    self.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    self.UIListLayout.Parent = self.ScrollingFrame
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 12)
    padding.PaddingRight = UDim.new(0, 12)
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingBottom = UDim.new(0, 10)
    padding.Parent = self.ScrollingFrame
    
    self.OriginalSize = self.MainFrame.Size
    self.OriginalPosition = self.MainFrame.Position
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        self:ToggleMinimize()
    end)
    
    self.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, self.UIListLayout.AbsoluteContentSize.Y + 15)
    end)
    
    self.TitleBar.MouseEnter:Connect(function()
        self.TitleBar.BackgroundColor3 = Color3.new(
            self.Colors.CollapseBtnColor.R * 1.2,
            self.Colors.CollapseBtnColor.G * 1.2,
            self.Colors.CollapseBtnColor.B * 1.2
        )
    end)
    
    self.TitleBar.MouseLeave:Connect(function()
        self.TitleBar.BackgroundColor3 = self.Colors.CollapseBtnColor
    end)
end

function UILibrary:AddTab(tabName)
    local tabButton = Instance.new("TextButton")
    tabButton.Name = "Tab_" .. tabName
    tabButton.Size = UDim2.new(1, -self.Config.TabPadding*2, 0, 30)
    tabButton.Position = UDim2.new(0, 0, 0, 0)
    tabButton.BackgroundColor3 = #self.Tabs == 0 and self.Colors.TabActiveColor or self.Colors.TabColor
    tabButton.BorderSizePixel = 0
    tabButton.Text = tabName
    tabButton.TextColor3 = self.Colors.TitleColor
    tabButton.Font = self.Config.Font
    tabButton.TextSize = self.Config.TextSize
    tabButton.LayoutOrder = #self.Tabs + 1
    tabButton.AutoButtonColor = false
    tabButton.Parent = self.TabSelector
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = tabButton
    
    -- Add UI Stroke to tab button
    if self.Config.UIStrokeEnabled then
        local tabStroke = Instance.new("UIStroke")
        tabStroke.Thickness = self.Config.UIStrokeThickness
        tabStroke.Color = self.Colors.UIStrokeColor
        tabStroke.Parent = tabButton
    end
    
    local tabContent = Instance.new("Frame")
    tabContent.Name = "TabContent_" .. tabName
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Position = UDim2.new(0, 0, 0, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = #self.Tabs == 0
    tabContent.Parent = self.ContentArea
    
    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Name = "ContentFrame"
    scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollingFrame.Position = UDim2.new(0, 0, 0, 0)
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.BorderSizePixel = 0
    scrollingFrame.ScrollBarThickness = 4
    scrollingFrame.ScrollBarImageColor3 = self.Colors.AccentColor
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollingFrame.Parent = tabContent
    
    local uiListLayout = Instance.new("UIListLayout")
    uiListLayout.Padding = UDim.new(0, self.Config.ElementPadding)
    uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    uiListLayout.Parent = scrollingFrame
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 12)
    padding.PaddingRight = UDim.new(0, 12)
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingBottom = UDim.new(0, 10)
    padding.Parent = scrollingFrame
    
    uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y + 15)
    end)
    
    tabButton.MouseEnter:Connect(function()
        if tabButton.BackgroundColor3 ~= self.Colors.TabActiveColor then
            tabButton.BackgroundColor3 = self.Colors.TabHoverColor
        end
    end)
    
    tabButton.MouseLeave:Connect(function()
        if tabButton.BackgroundColor3 ~= self.Colors.TabActiveColor then
            tabButton.BackgroundColor3 = self.Colors.TabColor
        end
    end)
    
    tabButton.MouseButton1Click:Connect(function()
        self:SwitchTab(tabName)
    end)
    
    local tab = {
        Name = tabName,
        Button = tabButton,
        Content = tabContent,
        ScrollingFrame = scrollingFrame,
        UIListLayout = uiListLayout,
        Elements = {}
    }
    
    table.insert(self.Tabs, tab)
    
    if #self.Tabs == 1 then
        self.CurrentTab = tab
        self.ScrollingFrame.Visible = false
    end
    
    return tab
end

function UILibrary:SwitchTab(tabName)
    for _, tab in ipairs(self.Tabs) do
        if tab.Name == tabName then
            tab.Content.Visible = true
            tab.Button.BackgroundColor3 = self.Colors.TabActiveColor
            self.CurrentTab = tab
        else
            tab.Content.Visible = false
            tab.Button.BackgroundColor3 = self.Colors.TabColor
        end
    end
end

function UILibrary:ToggleMinimize()
    self.Minimized = not self.Minimized
    if self.Minimized then
        self.MainFrame.Size = UDim2.new(0, self.OriginalSize.X.Offset, 0, self.Config.TitleHeight)
        self.MinimizeButton.Text = "+"
        self.ContentArea.Visible = false
        self.TabSelector.Visible = false
    else
        self.MainFrame.Size = self.OriginalSize
        self.MinimizeButton.Text = "-"
        self.ContentArea.Visible = true
        self.TabSelector.Visible = true
    end
end

-- All the existing element creation functions need to be modified to add elements to the current tab
-- Here's an example with AddButton, you'll need to do the same for all other element creation functions

function UILibrary:AddButton(config)
    if not self.CurrentTab then
        self:AddTab("Main") -- Create a default tab if none exists
    end
    
    local button = Instance.new("TextButton")
    button.Name = "Button_" .. config.Text
    button.Size = UDim2.new(1, -24, 0, 30)
    button.Position = UDim2.new(0, 12, 0, 0)
    button.BackgroundColor3 = self.Colors.ButtonColor
    button.BorderSizePixel = 0
    button.Text = config.Text
    button.TextColor3 = self.Colors.TitleColor
    button.Font = self.Config.Font
    button.TextSize = self.Config.TextSize
    button.LayoutOrder = #self.CurrentTab.Elements + 1
    button.AutoButtonColor = false
    button.Parent = self.CurrentTab.ScrollingFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = button
    
    -- Add UI Stroke to button
    if self.Config.UIStrokeEnabled then
        local buttonStroke = Instance.new("UIStroke")
        buttonStroke.Thickness = self.Config.UIStrokeThickness
        buttonStroke.Color = self.Colors.UIStrokeColor
        buttonStroke.Parent = button
    end
    
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = self.Colors.ButtonHoverColor
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = self.Colors.ButtonColor
    end)
    
    if config.Callback then
        button.MouseButton1Click:Connect(function()
            local originalSize = button.Size
            button.Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, originalSize.Y.Scale, originalSize.Y.Offset - 2)
            task.wait(0.08)
            button.Size = originalSize
            
            config.Callback()
        end)
    end
    
    table.insert(self.CurrentTab.Elements, button)
    return button
end

-- You'll need to similarly modify all other element creation functions (AddToggle, AddSlider, etc.)
-- to add elements to self.CurrentTab.ScrollingFrame instead of self.ScrollingFrame
-- and track elements in self.CurrentTab.Elements instead of self.Elements

-- For example, here's the modified AddSection function:

function UILibrary:AddSection(text)
    if not self.CurrentTab then
        self:AddTab("Main") -- Create a default tab if none exists
    end
    
    local section = Instance.new("Frame")
    section.Name = "Section_" .. text
    section.Size = UDim2.new(1, -24, 0, self.Config.SectionHeight)
    section.Position = UDim2.new(0, 12, 0, 0)
    section.BackgroundTransparency = 1
    section.LayoutOrder = #self.CurrentTab.Elements + 1
    section.Parent = self.CurrentTab.ScrollingFrame
    
    local sectionText = Instance.new("TextLabel")
    sectionText.Name = "TextLabel"
    sectionText.Size = UDim2.new(1, 0, 1, 0)
    sectionText.Position = UDim2.new(0, 0, 0, 0)
    sectionText.BackgroundTransparency = 1
    sectionText.Text = text
    sectionText.TextColor3 = self.Colors.SectionColor
    sectionText.TextXAlignment = Enum.TextXAlignment.Left
    sectionText.Font = Enum.Font.GothamBold
    sectionText.TextSize = self.Config.TextSize + 1
    sectionText.Parent = section
    
    table.insert(self.CurrentTab.Elements, section)
    return section
end

-- Similarly modify all other element creation functions...

function UILibrary:ToggleVisibility()
    self.Visible = not self.Visible
    self.ScreenGui.Enabled = self.Visible
end

function UILibrary:SetTitle(newTitle)
    self.Config.TitleText = newTitle
    self.TitleText.Text = newTitle
end

function UILibrary:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
    self = nil
end

return UILibrary
